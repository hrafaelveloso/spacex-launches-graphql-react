{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","details","site_name_long","launch_site","react_default","a","createElement","className","classnames","text-warning","text-danger","text-success","dist_default","format","length","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Fragment","components_MissionKey","react_apollo_browser_umd","query","loading","error","data","launches","map","components_LaunchItem","Component","LAUNCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","launch_failure_details","time","reason","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","display","margin","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+UC+CzBC,EA1CI,SAAAC,GASb,IAAAC,EAAAD,EARJE,OACEC,EAOEF,EAPFE,cACAC,EAMEH,EANFG,aACAC,EAKEJ,EALFI,kBACAC,EAIEL,EAJFK,eACAC,EAGEN,EAHFM,QACeC,EAEbP,EAFFQ,YAAeD,eAGjB,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,qBACW,IACTF,EAAAC,EAAAC,cAAA,QACEC,UAAWC,IAAW,CACpBC,eAAmC,OAAnBT,EAChBU,eAAkC,IAAnBV,EACfW,eAAgBX,KAGjBF,IAGLM,EAAAC,EAAAC,cAAA,kBACQF,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAQQ,OAAO,oBAAoBd,IAE3CK,EAAAC,EAAAC,cAAA,yBAAiBJ,GACJ,OAAZD,GAAoBA,EAAQa,OAAS,EAAIV,EAAAC,EAAAC,cAAA,qBAAaL,GAAe,MAExEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAE,WAAAC,OAAapB,GAAiBU,UAAU,qBAAhD,sBCpBKW,EAhBI,WACjB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBADlB,aAGAH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBADlB,UAGAH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBADlB,ySCLN,IAAMY,EAAiBC,IAAHC,KAuCLC,EAxBf,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEI,OACE9B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8B,SAAA,KACE/B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,YACAH,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAA,MAAD,CAAOC,MAAOnB,GACX,SAAAzB,GAA8B,IAA3B6C,EAA2B7C,EAA3B6C,QAASC,EAAkB9C,EAAlB8C,MAAOC,EAAW/C,EAAX+C,KAClB,OAAIF,EAAgBnC,EAAAC,EAAAC,cAAA,qBAChBkC,EAAcpC,EAAAC,EAAAC,cAAA,8BAEhBF,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8B,SAAA,KACGM,EAAKC,SAASC,IAAI,SAAA/C,GACjB,OAAOQ,EAAAC,EAAAC,cAACsC,EAAD,CAAYX,IAAKrC,EAAOC,cAAeD,OAAQA,cAbxE0B,EAAA,CAA8BuB,wfCf9B,IAAMC,EAAe1B,IAAH2B,KAkGHC,EA1Ef,SAAAzB,GAAA,SAAAyB,IAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,GAAAxB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAwB,EAAAzB,GAAAC,OAAAQ,EAAA,EAAAR,CAAAwB,EAAA,EAAAf,IAAA,SAAAC,MAAA,WACW,IACDrC,EAAkB6B,KAAKuB,MAAMC,MAAMC,OAAnCtD,cAGN,OAFAA,EAAgBuD,SAASvD,GAGvBO,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8B,SAAA,KACE/B,EAAAC,EAAAC,cAAC+B,EAAA,MAAD,CAAOC,MAAOQ,EAAcO,UAAW,CAAExD,kBACtC,SAAAH,GAA8B,IAA3B6C,EAA2B7C,EAA3B6C,QAASC,EAAkB9C,EAAlB8C,MAAOC,EAAW/C,EAAX+C,KAClB,GAAIF,EAAS,OAAOnC,EAAAC,EAAAC,cAAA,qBACpB,GAAIkC,EAAO,OAAOpC,EAAAC,EAAAC,cAAA,8BAFW,IAAAgD,EAazBb,EAAK7C,OARPE,EAL2BwD,EAK3BxD,aACAD,EAN2ByD,EAM3BzD,cACA0D,EAP2BD,EAO3BC,YACAvD,EAR2BsD,EAQ3BtD,eACAD,EAT2BuD,EAS3BvD,kBAT2ByD,EAAAF,EAU3BG,OAAUC,EAViBF,EAUjBE,UAAWC,EAVMH,EAUNG,YAAaC,EAVPJ,EAUOI,YACnB1D,EAXYoD,EAW3BnD,YAAeD,eACf2D,EAZ2BP,EAY3BO,uBAGF,OACEzD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACZH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,YADF,IAC+CT,GAE/CM,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,kBAAgDV,GAChDO,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBAA8CgD,GAC9CnD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACeH,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAQQ,OAAO,oBAAoBd,IAElDK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBAA8CL,GAC9CE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,iBACiB,KACK,IAAnBP,EACCI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,UACEP,EACFI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,WAEAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,cAGgB,IAAnBP,EACCI,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8B,SAAA,KACE/B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,4BAC4BsD,EAAuBC,KADnD,YAGA1D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,WAAyCsD,EAAuBE,SAEhE,MAEN3D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,cAA4CmD,GAC5CtD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBAA8CoD,GAC9CvD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBAA8CqD,IAEhDxD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAG,IAAIT,UAAU,qBAAvB,gBA9DhByC,EAAA,CAA4BH,sCCpBtBmB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAmBQC,mLAdX,OACE/D,EAAAC,EAAAC,cAAC+B,EAAA,eAAD,CAAgB2B,OAAQA,GACtB5D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,KACEhE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAK+D,IAAKC,IAAMC,IAAI,SAASC,MAAO,CAAEC,MAAO,IAAKC,QAAS,QAASC,OAAQ,UAC5EvE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzD,IACjClB,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,yBAAyBC,UAAW/B,cARhDH,aCFEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjC,MACvB,2DCZNkC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7d3f89af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f751c040.png\";","import React from 'react';\nimport classnames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst LaunchItem = ({\n  launch: {\n    flight_number,\n    mission_name,\n    launch_date_local,\n    launch_success,\n    details,\n    launch_site: { site_name_long },\n  },\n}) => {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:{' '}\n            <span\n              className={classnames({\n                'text-warning': launch_success === null,\n                'text-danger': launch_success === false,\n                'text-success': launch_success,\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format=\"DD/MM/YYYY HH:mm\">{launch_date_local}</Moment>\n          </p>\n          <p>Launch site: {site_name_long}</p>\n          {details !== null && details.length > 1 ? <p>Details: {details}</p> : null}\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Launch details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LaunchItem;\n","import React from 'react';\n\nconst MissionKey = () => {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" />= Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" />= Fail\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-warning\" />= Upcoming\n      </p>\n    </div>\n  );\n};\n\nexport default MissionKey;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n  query launchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n      details\n      launch_site {\n        site_name_long\n      }\n    }\n  }\n`;\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading</h4>;\n            if (error) return <h4>An error occured</h4>;\n            return (\n              <>\n                {data.launches.map(launch => {\n                  return <LaunchItem key={launch.flight_number} launch={launch} />;\n                })}\n              </>\n            );\n          }}\n        </Query>\n      </>\n    );\n  }\n}\n\nexport default Launches;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n      launch_site {\n        site_name_long\n      }\n      launch_failure_details {\n        time\n        reason\n      }\n    }\n  }\n`;\n\nexport class Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n\n    return (\n      <>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading</h4>;\n            if (error) return <h4>An error occured</h4>;\n\n            const {\n              mission_name,\n              flight_number,\n              launch_year,\n              launch_success,\n              launch_date_local,\n              rocket: { rocket_id, rocket_name, rocket_type },\n              launch_site: { site_name_long },\n              launch_failure_details,\n            } = data.launch;\n\n            return (\n              <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\">Mission:</span> {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch details</h4>\n                <ul className=\"list-group mb-2\">\n                  <li className=\"list-group-item\">Flight number: {flight_number}</li>\n                  <li className=\"list-group-item\">Launch year: {launch_year}</li>\n                  <li className=\"list-group-item\">\n                    Launch date: <Moment format=\"DD/MM/YYYY HH:mm\">{launch_date_local}</Moment>\n                  </li>\n                  <li className=\"list-group-item\">Launch site: {site_name_long}</li>\n                  <li className=\"list-group-item\">\n                    Launch status:{' '}\n                    {launch_success === false ? (\n                      <span className=\"text-danger\">Failed</span>\n                    ) : launch_success ? (\n                      <span className=\"text-success\">Success</span>\n                    ) : (\n                      <span className=\"text-warning\">Upcoming</span>\n                    )}\n                  </li>\n                  {launch_success === false ? (\n                    <>\n                      <li className=\"list-group-item\">\n                        Elapsed time to failure: {launch_failure_details.time} seconds\n                      </li>\n                      <li className=\"list-group-item\">Reason: {launch_failure_details.reason}</li>\n                    </>\n                  ) : null}\n                </ul>\n                <h4 className=\"mb-3\">Rocket details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Rocket id: {rocket_id}</li>\n                  <li className=\"list-group-item\">Rocket name: {rocket_name}</li>\n                  <li className=\"list-group-item\">Rocket type: {rocket_type}</li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-secondary\">\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </>\n    );\n  }\n}\n\nexport default Launch;\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport './App.css';\nimport logo from './logo.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container-fluid\">\n            <img src={logo} alt=\"SpaceX\" style={{ width: 400, display: 'block', margin: 'auto' }} />\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}